from aiogram import Router, F
from aiogram import html
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
import sys
import time
sys.path.append("/Users/alexded/Desktop/rg_sch_par/bot/parser")
sys.path.append("/Users/alexded/Desktop/rg_sch_par/bot/keyboards")

from keyboards.menu_keyboard import menu, choice_schedulle, choice_graduate, choice_kurs, choice_srok, ButtonsName
from parser import parser_1

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        f"üëã–ü—Ä–∏–≤–µ—Ç, {html.bold(html.quote(message.from_user.full_name))}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–∑–≤–∞–Ω –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
        reply_markup=menu()
    )


# showing the author's information
@router.message(F.text.lower() == ButtonsName.author.value)
async def show_author(message: Message):
    await message.answer(
        "–°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –§–ò–°–ë_–ü–ò_–ü–ò–ì–°\n–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –î–µ–¥–µ–Ω–µ–≤\nGitHub: https://github.com/DedenevAI/DedenevAI"
    )


# choosing the various of getting schedulle
@router.message(F.text.lower() == ButtonsName.schedule_main.value)
async def show_schedulle_types(message: Message):
    await message.answer(
        "–ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
        reply_markup=choice_schedulle()
    )


@router.message(F.text.lower() == ButtonsName.schedule.value[0])
async def show_graduate(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=choice_graduate()
    )


@router.message(F.text.lower().in_({ButtonsName.graduate.value.values()}))
async def show_kurs(message: Message):
    global formob1
    formob1 = message.text
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=choice_kurs()
    )


@router.message(F.text.lower().in_({ButtonsName.kurs.value.values()}))
async def show_srok(message: Message):
    global kurs
    kurs = message.text
    await message.answer(
        "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
        reply_markup=choice_srok()
    )


@router.message(F.text.lower().in_({ButtonsName.srok.value.values()}))
async def show_srok(message: Message):
    global srok, download_mode
    
    download_mode = False
    srok = message.text
    
    if srok.lower() == ButtonsName.srok.value.get("month") or ButtonsName.srok.value.get("sem"):
        download_mode = True
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–æ—Ç–æ–∫–∞:",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(F.text)
async def show_schedule(message: Message):
    global caf
    caf = message.text

    if download_mode == False:
        
        table = parser_1.Potok_parser(formob1, kurs, srok, caf, download_mode).parse()
        
        await message.answer(
            f"{table}", parse_mode = ParseMode.HTML
        )
   
    else:
        await message.answer(
            "–ò–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        parser_1.Potok_parser(formob1, kurs, srok, caf, download_mode).parse()
        time.sleep(20)

        schedule = FSInputFile("/Users/alexded/Desktop/rg_sch_par/bot/files/schedule.xlsx")
        
        await message.answer_document(
            schedule,
            caption= "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:"
        )

